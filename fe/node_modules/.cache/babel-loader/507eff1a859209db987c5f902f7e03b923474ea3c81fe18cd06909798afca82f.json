{"ast":null,"code":"// src/api/authApi.js (Cập nhật cho Spring/GraphQL)\nimport axios from 'axios';\n\n// Thay đổi URL này thành GraphQL Endpoint của Spring Boot của bạn\nconst GRAPHQL_ENDPOINT = 'http://localhost:8080/graphql';\nconst authApi = {\n  // Hàm chung để gửi yêu cầu GraphQL\n  sendGraphQLRequest: async (query, variables = {}) => {\n    try {\n      const response = await axios.post(GRAPHQL_ENDPOINT, {\n        query,\n        variables\n      });\n\n      // Xử lý lỗi từ server (nếu có)\n      if (response.data.errors) {\n        console.error(\"GraphQL Errors:\", response.data.errors);\n        // Trả về lỗi đầu tiên hoặc thông báo chung\n        throw new Error(response.data.errors[0].message || \"Lỗi GraphQL từ Server.\");\n      }\n      return response.data.data;\n    } catch (error) {\n      console.error(\"API Call Error:\", error);\n      // Xử lý lỗi mạng hoặc lỗi không xác định\n      throw new Error(error.message || \"Không thể kết nối đến server.\");\n    }\n  },\n  // 1. Đăng nhập (Login)\n  login: async credentials => {\n    var _data$login, _data$login2, _data$login2$user;\n    const LOGIN_MUTATION = `\n            mutation Login($email: String!, $password: String!) {\n                login(email: $email, password: $password) {\n                    token\n                    user {\n                        role\n                    }\n                }\n            }\n        `;\n    const data = await authApi.sendGraphQLRequest(LOGIN_MUTATION, credentials);\n    const token = data === null || data === void 0 ? void 0 : (_data$login = data.login) === null || _data$login === void 0 ? void 0 : _data$login.token;\n    const role = data === null || data === void 0 ? void 0 : (_data$login2 = data.login) === null || _data$login2 === void 0 ? void 0 : (_data$login2$user = _data$login2.user) === null || _data$login2$user === void 0 ? void 0 : _data$login2$user.role;\n    if (token && role) {\n      return {\n        success: true,\n        token,\n        role\n      };\n    } else {\n      // Trường hợp logic đăng nhập thất bại (có thể do lỗi từ server, hoặc trả về null/undefined)\n      return {\n        success: false,\n        message: \"Email hoặc mật khẩu không đúng.\"\n      };\n    }\n  },\n  // 2. Đăng ký Hộ gia đình (Role: ChuHo)\n  registerFamily: async data => {\n    var _result$registerFamil;\n    const REGISTER_FAMILY_MUTATION = `\n            mutation RegisterFamily($input: FamilyRegisterInput!) {\n                registerFamily(input: $input) {\n                    userID\n                    email\n                }\n            }\n        `;\n\n    // Cần đảm bảo trường input FamilyRegisterInput khớp với backend Spring của bạn\n    // Bỏ 'confirmPassword' vì nó chỉ dùng ở frontend\n    const {\n      confirmPassword,\n      ...inputData\n    } = data;\n    const variables = {\n      input: {\n        ...inputData,\n        role: 'ChuHo' // Đảm bảo role được gửi đúng\n      }\n    };\n    const result = await authApi.sendGraphQLRequest(REGISTER_FAMILY_MUTATION, variables);\n    if (result !== null && result !== void 0 && (_result$registerFamil = result.registerFamily) !== null && _result$registerFamil !== void 0 && _result$registerFamil.userID) {\n      return {\n        success: true,\n        message: \"Đăng ký hộ gia đình thành công! Bạn có thể đăng nhập ngay.\"\n      };\n    } else {\n      return {\n        success: false,\n        message: \"Đăng ký thất bại. Email có thể đã tồn tại.\"\n      };\n    }\n  },\n  // 3. Đăng ký Bác sĩ (Role: BacSi)\n  registerDoctor: async data => {\n    var _result$registerDocto;\n    const REGISTER_DOCTOR_MUTATION = `\n            mutation RegisterDoctor($input: DoctorRegisterInput!) {\n                registerDoctor(input: $input) {\n                    userID\n                    email\n                }\n            }\n        `;\n    const {\n      confirmPassword,\n      ...inputData\n    } = data;\n    const variables = {\n      input: {\n        ...inputData,\n        role: 'BacSi' // Đảm bảo role được gửi đúng\n      }\n    };\n    const result = await authApi.sendGraphQLRequest(REGISTER_DOCTOR_MUTATION, variables);\n    if (result !== null && result !== void 0 && (_result$registerDocto = result.registerDoctor) !== null && _result$registerDocto !== void 0 && _result$registerDocto.userID) {\n      return {\n        success: true,\n        message: \"Đăng ký bác sĩ thành công! Vui lòng chờ admin duyệt.\"\n      };\n    } else {\n      return {\n        success: false,\n        message: \"Đăng ký thất bại. Mã Bác sĩ hoặc Email có thể đã tồn tại.\"\n      };\n    }\n  }\n};\nexport default authApi;","map":{"version":3,"names":["axios","GRAPHQL_ENDPOINT","authApi","sendGraphQLRequest","query","variables","response","post","data","errors","console","error","Error","message","login","credentials","_data$login","_data$login2","_data$login2$user","LOGIN_MUTATION","token","role","user","success","registerFamily","_result$registerFamil","REGISTER_FAMILY_MUTATION","confirmPassword","inputData","input","result","userID","registerDoctor","_result$registerDocto","REGISTER_DOCTOR_MUTATION"],"sources":["D:/J2EE/familymedical/fe/src/api/authApi.js"],"sourcesContent":["// src/api/authApi.js (Cập nhật cho Spring/GraphQL)\r\nimport axios from 'axios';\r\n\r\n// Thay đổi URL này thành GraphQL Endpoint của Spring Boot của bạn\r\nconst GRAPHQL_ENDPOINT = 'http://localhost:8080/graphql';\r\n\r\nconst authApi = {\r\n    // Hàm chung để gửi yêu cầu GraphQL\r\n    sendGraphQLRequest: async (query, variables = {}) => {\r\n        try {\r\n            const response = await axios.post(GRAPHQL_ENDPOINT, {\r\n                query,\r\n                variables,\r\n            });\r\n\r\n            // Xử lý lỗi từ server (nếu có)\r\n            if (response.data.errors) {\r\n                console.error(\"GraphQL Errors:\", response.data.errors);\r\n                // Trả về lỗi đầu tiên hoặc thông báo chung\r\n                throw new Error(response.data.errors[0].message || \"Lỗi GraphQL từ Server.\");\r\n            }\r\n\r\n            return response.data.data;\r\n        } catch (error) {\r\n            console.error(\"API Call Error:\", error);\r\n            // Xử lý lỗi mạng hoặc lỗi không xác định\r\n            throw new Error(error.message || \"Không thể kết nối đến server.\");\r\n        }\r\n    },\r\n\r\n    // 1. Đăng nhập (Login)\r\n    login: async (credentials) => {\r\n        const LOGIN_MUTATION = `\r\n            mutation Login($email: String!, $password: String!) {\r\n                login(email: $email, password: $password) {\r\n                    token\r\n                    user {\r\n                        role\r\n                    }\r\n                }\r\n            }\r\n        `;\r\n        \r\n        const data = await authApi.sendGraphQLRequest(LOGIN_MUTATION, credentials);\r\n\r\n        const token = data?.login?.token;\r\n        const role = data?.login?.user?.role;\r\n        \r\n        if (token && role) {\r\n            return { success: true, token, role };\r\n        } else {\r\n            // Trường hợp logic đăng nhập thất bại (có thể do lỗi từ server, hoặc trả về null/undefined)\r\n            return { success: false, message: \"Email hoặc mật khẩu không đúng.\" };\r\n        }\r\n    },\r\n\r\n    // 2. Đăng ký Hộ gia đình (Role: ChuHo)\r\n    registerFamily: async (data) => {\r\n        const REGISTER_FAMILY_MUTATION = `\r\n            mutation RegisterFamily($input: FamilyRegisterInput!) {\r\n                registerFamily(input: $input) {\r\n                    userID\r\n                    email\r\n                }\r\n            }\r\n        `;\r\n        \r\n        // Cần đảm bảo trường input FamilyRegisterInput khớp với backend Spring của bạn\r\n        // Bỏ 'confirmPassword' vì nó chỉ dùng ở frontend\r\n        const { confirmPassword, ...inputData } = data; \r\n        \r\n        const variables = { \r\n            input: { \r\n                ...inputData, \r\n                role: 'ChuHo' // Đảm bảo role được gửi đúng\r\n            } \r\n        };\r\n\r\n        const result = await authApi.sendGraphQLRequest(REGISTER_FAMILY_MUTATION, variables);\r\n        \r\n        if (result?.registerFamily?.userID) {\r\n            return { success: true, message: \"Đăng ký hộ gia đình thành công! Bạn có thể đăng nhập ngay.\" };\r\n        } else {\r\n            return { success: false, message: \"Đăng ký thất bại. Email có thể đã tồn tại.\" };\r\n        }\r\n    },\r\n\r\n    // 3. Đăng ký Bác sĩ (Role: BacSi)\r\n    registerDoctor: async (data) => {\r\n        const REGISTER_DOCTOR_MUTATION = `\r\n            mutation RegisterDoctor($input: DoctorRegisterInput!) {\r\n                registerDoctor(input: $input) {\r\n                    userID\r\n                    email\r\n                }\r\n            }\r\n        `;\r\n        \r\n        const { confirmPassword, ...inputData } = data;\r\n        \r\n        const variables = { \r\n            input: { \r\n                ...inputData, \r\n                role: 'BacSi' // Đảm bảo role được gửi đúng\r\n            } \r\n        };\r\n\r\n        const result = await authApi.sendGraphQLRequest(REGISTER_DOCTOR_MUTATION, variables);\r\n        \r\n        if (result?.registerDoctor?.userID) {\r\n            return { success: true, message: \"Đăng ký bác sĩ thành công! Vui lòng chờ admin duyệt.\" };\r\n        } else {\r\n             return { success: false, message: \"Đăng ký thất bại. Mã Bác sĩ hoặc Email có thể đã tồn tại.\" };\r\n        }\r\n    }\r\n};\r\n\r\nexport default authApi;"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,gBAAgB,GAAG,+BAA+B;AAExD,MAAMC,OAAO,GAAG;EACZ;EACAC,kBAAkB,EAAE,MAAAA,CAAOC,KAAK,EAAEC,SAAS,GAAG,CAAC,CAAC,KAAK;IACjD,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAI,CAACN,gBAAgB,EAAE;QAChDG,KAAK;QACLC;MACJ,CAAC,CAAC;;MAEF;MACA,IAAIC,QAAQ,CAACE,IAAI,CAACC,MAAM,EAAE;QACtBC,OAAO,CAACC,KAAK,CAAC,iBAAiB,EAAEL,QAAQ,CAACE,IAAI,CAACC,MAAM,CAAC;QACtD;QACA,MAAM,IAAIG,KAAK,CAACN,QAAQ,CAACE,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAACI,OAAO,IAAI,wBAAwB,CAAC;MAChF;MAEA,OAAOP,QAAQ,CAACE,IAAI,CAACA,IAAI;IAC7B,CAAC,CAAC,OAAOG,KAAK,EAAE;MACZD,OAAO,CAACC,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;MACvC;MACA,MAAM,IAAIC,KAAK,CAACD,KAAK,CAACE,OAAO,IAAI,+BAA+B,CAAC;IACrE;EACJ,CAAC;EAED;EACAC,KAAK,EAAE,MAAOC,WAAW,IAAK;IAAA,IAAAC,WAAA,EAAAC,YAAA,EAAAC,iBAAA;IAC1B,MAAMC,cAAc,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;IAED,MAAMX,IAAI,GAAG,MAAMN,OAAO,CAACC,kBAAkB,CAACgB,cAAc,EAAEJ,WAAW,CAAC;IAE1E,MAAMK,KAAK,GAAGZ,IAAI,aAAJA,IAAI,wBAAAQ,WAAA,GAAJR,IAAI,CAAEM,KAAK,cAAAE,WAAA,uBAAXA,WAAA,CAAaI,KAAK;IAChC,MAAMC,IAAI,GAAGb,IAAI,aAAJA,IAAI,wBAAAS,YAAA,GAAJT,IAAI,CAAEM,KAAK,cAAAG,YAAA,wBAAAC,iBAAA,GAAXD,YAAA,CAAaK,IAAI,cAAAJ,iBAAA,uBAAjBA,iBAAA,CAAmBG,IAAI;IAEpC,IAAID,KAAK,IAAIC,IAAI,EAAE;MACf,OAAO;QAAEE,OAAO,EAAE,IAAI;QAAEH,KAAK;QAAEC;MAAK,CAAC;IACzC,CAAC,MAAM;MACH;MACA,OAAO;QAAEE,OAAO,EAAE,KAAK;QAAEV,OAAO,EAAE;MAAkC,CAAC;IACzE;EACJ,CAAC;EAED;EACAW,cAAc,EAAE,MAAOhB,IAAI,IAAK;IAAA,IAAAiB,qBAAA;IAC5B,MAAMC,wBAAwB,GAAG;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;IAED;IACA;IACA,MAAM;MAAEC,eAAe;MAAE,GAAGC;IAAU,CAAC,GAAGpB,IAAI;IAE9C,MAAMH,SAAS,GAAG;MACdwB,KAAK,EAAE;QACH,GAAGD,SAAS;QACZP,IAAI,EAAE,OAAO,CAAC;MAClB;IACJ,CAAC;IAED,MAAMS,MAAM,GAAG,MAAM5B,OAAO,CAACC,kBAAkB,CAACuB,wBAAwB,EAAErB,SAAS,CAAC;IAEpF,IAAIyB,MAAM,aAANA,MAAM,gBAAAL,qBAAA,GAANK,MAAM,CAAEN,cAAc,cAAAC,qBAAA,eAAtBA,qBAAA,CAAwBM,MAAM,EAAE;MAChC,OAAO;QAAER,OAAO,EAAE,IAAI;QAAEV,OAAO,EAAE;MAA6D,CAAC;IACnG,CAAC,MAAM;MACH,OAAO;QAAEU,OAAO,EAAE,KAAK;QAAEV,OAAO,EAAE;MAA6C,CAAC;IACpF;EACJ,CAAC;EAED;EACAmB,cAAc,EAAE,MAAOxB,IAAI,IAAK;IAAA,IAAAyB,qBAAA;IAC5B,MAAMC,wBAAwB,GAAG;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;IAED,MAAM;MAAEP,eAAe;MAAE,GAAGC;IAAU,CAAC,GAAGpB,IAAI;IAE9C,MAAMH,SAAS,GAAG;MACdwB,KAAK,EAAE;QACH,GAAGD,SAAS;QACZP,IAAI,EAAE,OAAO,CAAC;MAClB;IACJ,CAAC;IAED,MAAMS,MAAM,GAAG,MAAM5B,OAAO,CAACC,kBAAkB,CAAC+B,wBAAwB,EAAE7B,SAAS,CAAC;IAEpF,IAAIyB,MAAM,aAANA,MAAM,gBAAAG,qBAAA,GAANH,MAAM,CAAEE,cAAc,cAAAC,qBAAA,eAAtBA,qBAAA,CAAwBF,MAAM,EAAE;MAChC,OAAO;QAAER,OAAO,EAAE,IAAI;QAAEV,OAAO,EAAE;MAAuD,CAAC;IAC7F,CAAC,MAAM;MACF,OAAO;QAAEU,OAAO,EAAE,KAAK;QAAEV,OAAO,EAAE;MAA4D,CAAC;IACpG;EACJ;AACJ,CAAC;AAED,eAAeX,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}